<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[编译ijkplayer-android源码]]></title>
      <url>%2F2017%2F05%2F04%2F%E7%BC%96%E8%AF%91ijkplayer-android%E6%BA%90%E7%A0%81%2F</url>
      <content type="text"><![CDATA[#编译ijkplayer-android源码# 原本想在windows系统下编译，不过在windows 7 64位旗舰版系统下编译ffmpeg出现以下错误： $ ./compile-ffmpeg.sh all ==================== [*] check archs ==================== FF_ALL_ARCHS = armv5 armv7a arm64 x86 x86_64 FF_ACT_ARCHS = armv5 armv7a arm64 x86 x86_64 ==================== [*] check env armv5 ==================== FF_ARCH=armv5 FF_BUILD_OPT= -------------------- [*] make NDK standalone toolchain -------------------- build on MINGW64_NT-6.1 x86_64 ANDROID_NDK=C:\develop\AndroidNDK IJK_NDK_REL=14.1.3816874 NDKr14.1.3816874 detected HOST_OS=windows HOST_EXE=.exe HOST_ARCH=x86_64 HOST_TAG=windows-x86_64 HOST_NUM_CPUS=4 BUILD_NUM_CPUS=8 Auto-config: --arch=arm ERROR: Failed to create toolchain. 寻求解决办法无果，继而转向Ubuntu系统编译。 ##编译环境## Ubuntu 17.04 64位 ##编译步骤## 在任意位置打开终端，输入以下命令安装git、yasm： 12sudo apt install gitsudo apt install yasm 配置ANDROID_SDK和ANDROID_NDK环境变量。在用户Home目录按“Ctrl+H”显示隐藏文件，找到.bashrc并打开，添加以下语句到末尾： 123456#ANDROID SDK所在目录export ANDROID_SDK="/home/jeff-chou/develop/android-sdk-linux"#ANDROID NDK所在目录export ANDROID_NDK="/home/jeff-chou/develop/android-ndk-r13b"#加入到PATH路径PATH="$PATH:$&#123;ANDROID_SDK&#125;:$&#123;ANDROID_NDK&#125;" 在你想要存储ijkplayer源码的目录下打开终端，通过git命令获取源码： 123git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-androidcd ijkplayer-androidgit checkout -B latest k0.7.9 配置ffmpeg编解码器格式： 支持所有格式 123cd configrm module.shln -s module-default.sh module.sh 支持常用格式（包括HEVC/H.265） 123cd configrm module.shln -s module-lite-hevc.sh module.sh 支持常用格式（默认配置） 123cd configrm module.shln -s module-lite.sh module.sh 编译ffmpeg： 12345./init-android.shcd android/contrib./compile-ffmpeg.sh clean./compile-ffmpeg.sh all 编译ijkplayer： 12cd .../compile-ijk.sh all ##鸣谢## http://blog.csdn.net/u010072711/article/details/51438871]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu手动安装或更新VMware Tools]]></title>
      <url>%2F2017%2F05%2F03%2FUbuntu%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%88%96%E6%9B%B4%E6%96%B0VMware-Tools%2F</url>
      <content type="text"><![CDATA[安装环境 VMware Workstation 12 Pro Ubuntu 17.04 64位系统 安装步骤 开启虚拟机。 在VMware Workstation菜单栏选择“虚拟机 &gt; 安装 VMware Tools”，等待CD/DVD Drive挂载VMware Tools，如下图所示： 右键点击VMwareTools tar.gz压缩包，选择“Extract To…”解压缩到用户目录中，我这里选择了Downloads。 进入vmware-tools-distrib目录，右键点击空白处选择“Open in Terminal”打开终端 安装VMware Tools需要超级用户权限，使用以下命令安装： 1sudo ./vmware-install.pl 输入登录密码，一路回车即可。 提示：安装过程中可能会出现以下语句，询问ifconfig所在位置。 1What is the location of the "ifconfig" program on your machine? 可以再打开一个终端窗口使用“Whereis”命令查看： 1Whereis ifconfig 返回结果如果是： 1ifconfig: 说明系统中没有ifconfig，可以使用以下命令安装： 1sudo apt install net-tools 返回结果如果是： 1ifconfig: /sbin/ifconfig /usr/share/man/man8/ifconfig.8.gz 说明ifconfig位置就在/sbin/ifconfig]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[欢迎来到我的个人技术博客]]></title>
      <url>%2F2017%2F04%2F15%2F1%2F</url>
      <content type="text"><![CDATA[因为某些原因，荒废了两年半的时间，没有接触程序猿方面的东西，这两天才重新捡起来，在网上看了很多软件开发类的资讯，发现两年半的时间真的让自己都要不认识这个行业了，当年流行的技术现如今不再流行，新的更实用的技术层出不穷，感觉自己已经奥特了，重新回归觉得真的是个不小的挑战。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[原]主叫号码信息识别及传送]]></title>
      <url>%2F2017%2F04%2F14%2F%E5%8E%9F-%E4%B8%BB%E5%8F%AB%E5%8F%B7%E7%A0%81%E4%BF%A1%E6%81%AF%E8%AF%86%E5%88%AB%E5%8F%8A%E4%BC%A0%E9%80%81%2F</url>
      <content type="text"><![CDATA[概述 主叫号码信息识别及传送（CID，Calling Identity Delivery），是指在被叫用户终端设备上显示主叫号码、主叫用户姓名、呼叫日期、时间等主叫识别信息并进行存储，以供用户查阅。通俗的名称就是来电显示。 目前两种实现方式 一、FSK 移频键控（Frequency-shift keying），目前采用FSK方式的国家和地区有：美国、中国、日本、英国、加拿大、比利时、西班牙、新加坡等。 二、DTMF 双音多频（Dual Tone Multi Frequency），目前采用DTMF方式的国家和地区有：以瑞典为代表的一些欧洲国家等。 三、两者比较 FSK方式与DTMF方式相比有如下的优点：（l）数据传输速率高，在规定时间内能传的字符数多；（2）FSK方式支持ASCII字符集，而DTMF方式只支持数字及少数字符。 FSK基本原理 发端交换机将主叫识别信息通过局间信令系统(例如NO.7信令系统)传送给终端交换机，终端交换机将主叫识别信息以移频键控FSK的方式送给被叫用户终端设备。 终端交换机将主叫识别信息送给被叫用户终端设备在下两种状态下进行：一种是用户终端挂机状态；另一种是用户终端通话状态。 挂机状态下的传送方法是终端交换机将主叫识别信息在第一次振铃和第二次振铃间隔期间送给被叫用户终端设备。 通话状态下的传送方法是具有CID功能的用户乙正在与甲通话中，这时又有第三方丙呼叫用户乙，在用户乙终端设备上显示用户丙的识别信息，在此状态下的CID业务必须以呼叫等待（call waiting）业务为前提。 用户作为被叫，在接受来话时可以要求提供CID业务，也可以不要求提供此项业务。 用户作为主叫，在发出呼叫时是否允许向被叫终端设备显示主叫号码可作如下选择： 1. 申请向被叫用户终端设备显示主叫号码，允许单次呼叫不显示（需开通主叫隐藏业务）。如果要求对某次呼叫不向被叫用户显示其主叫号码，需要在拨被叫号码前加拨限制标志号码 ,即拨“限制标志号码+被叫号码”。发端交换机收到限制标志号码后送出限制标志，终端交换机不将该次呼叫的主叫号码送到被叫终端设备。 【注释】GSM 移动电话（移动、联通）：#31# + 被叫号 CDMA移动电话（电信）：*76 + 被叫号码 公众、固定电话：*62 + 被叫号码 其它电话网根据运营商和交换机种类的不同，其激化方 式也不一样。（例如：阿尔卡特4400分机的主叫隐藏业务的激化方式为：*28+被叫号码） 2. 申请不向被叫用户终端设备显示主叫号码，允许单次呼叫显示。 3. 呼叫需要显示主叫号码的特服号码，都会向被叫终端设备发送主叫识别信息。 作者：redzealot2007 发表于2017/4/14 17:42:21 原文链接 阅读：7 评论：0 查看评论]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[原]java获取路径]]></title>
      <url>%2F2017%2F04%2F13%2F%E5%8E%9F-java%E8%8E%B7%E5%8F%96%E8%B7%AF%E5%BE%84%2F</url>
      <content type="text"><![CDATA[//获取当前类生成目录 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Main&lt;span class=&quot;hljs-preprocessor&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Main&lt;span class=&quot;hljs-preprocessor&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Main&lt;span class=&quot;hljs-preprocessor&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取当前类生成目录的上一级目录 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Main&lt;span class=&quot;hljs-preprocessor&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;..&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getFile&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Main&lt;span class=&quot;hljs-preprocessor&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;../&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取类生成根目录 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Main&lt;span class=&quot;hljs-preprocessor&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Main&lt;span class=&quot;hljs-preprocessor&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getClassLoader&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Main&lt;span class=&quot;hljs-preprocessor&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getClassLoader&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Main&lt;span class=&quot;hljs-preprocessor&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getClassLoader&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(ClassLoader&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getSystemResources&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.nextElement&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(ClassLoader&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getSystemResources&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.nextElement&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(ClassLoader&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getSystemResources&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.nextElement&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Thread&lt;span class=&quot;hljs-preprocessor&quot;&gt;.currentThread&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getContextClassLoader&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Thread&lt;span class=&quot;hljs-preprocessor&quot;&gt;.currentThread&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getContextClassLoader&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(Thread&lt;span class=&quot;hljs-preprocessor&quot;&gt;.currentThread&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getContextClassLoader&lt;/span&gt;()&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getResource&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;./&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取项目根目录 File file = new File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(file&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getCanonicalPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(file&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getAbsolutePath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取系统根目录 File file1 = new File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(file1&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getCanonicalPath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(file1&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getAbsolutePath&lt;/span&gt;())&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取项目根目录 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user.dir&quot;&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取用户主目录 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;user.home&quot;&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取java主目录 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;java.home&quot;&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取加载类时搜索的路径列表 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;java.class.path&quot;&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取加载库时搜索的路径列表 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;java.library.path&quot;&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取默认的临时文件路径 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;java.io.tmpdir&quot;&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt; //获取java扩展目录 System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.out&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.println&lt;/span&gt;(System&lt;span class=&quot;hljs-preprocessor&quot;&gt;.getProperty&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;java.ext.dirs&quot;&lt;/span&gt;))&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;`&lt;/pre&gt; 输出结果： &lt;pre class=&quot;prettyprint&quot;&gt;`/C:/develop/repository/test/out/production/test/me/jeff/ /C:/develop/repository/test/out/production/test/me/jeff/ /C:/develop/repository/test/out/production/test/me/jeff/ /C:/develop/repository/test/out/production/test/me/ /C:/develop/repository/test/out/production/test/me/ /C:/develop/repository/test/out/production/test/ /C:/develop/repository/test/out/production/test/ /C:/develop/repository/test/out/production/test/ /C:/develop/repository/test/out/production/test/ /C:/develop/repository/test/out/production/test/ /C:/develop/repository/test/out/production/test/ /C:/develop/repository/test/out/production/test/ /C:/develop/repository/test/out/production/test/ /C:/develop/repository/test/out/production/test/ /C:/develop/repository/test/out/production/test/ C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\repository&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\test&lt;/span&gt; C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\repository&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\test&lt;/span&gt; C:&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;C:&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\repository&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\test&lt;/span&gt; C:&lt;span class=&quot;hljs-command&quot;&gt;\Users&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Jeff&lt;/span&gt; Chou C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt; C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\charsets&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\deploy&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\access&lt;/span&gt;-bridge-64.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\cldrdata&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\dnsns&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jaccess&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jfxrt&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\localedata&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\nashorn&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\sunec&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\sunjce&lt;/span&gt;_provider.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\sunmscapi&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\sunpkcs&lt;/span&gt;11.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\zipfs&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\javaws&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jce&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jfr&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jfxswt&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jsse&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\management&lt;/span&gt;-agent.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\plugin&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\resources&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\rt&lt;/span&gt;.jar;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\repository&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\test&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\out&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\production&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\test&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\IntelliJ&lt;/span&gt; IDEA&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\idea&lt;/span&gt;_rt.jar C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\bin&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\Windows&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Sun&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\bin&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\Windows&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\system&lt;/span&gt;32;C:&lt;span class=&quot;hljs-command&quot;&gt;\Windows&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\ProgramData&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Oracle&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\javapath&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\bin&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\Windows&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\system&lt;/span&gt;32;C:&lt;span class=&quot;hljs-command&quot;&gt;\Windows&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\Windows&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\System&lt;/span&gt;32&lt;span class=&quot;hljs-command&quot;&gt;\Wbem&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\Windows&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\System&lt;/span&gt;32&lt;span class=&quot;hljs-command&quot;&gt;\WindowsPowerShell&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\v&lt;/span&gt;1.0&lt;span class=&quot;hljs-command&quot;&gt;\;&lt;/span&gt;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Git&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\cmd&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\IntelliJ&lt;/span&gt; IDEA&lt;span class=&quot;hljs-command&quot;&gt;\plugins&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\maven&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\maven&lt;/span&gt;3&lt;span class=&quot;hljs-command&quot;&gt;\bin&lt;/span&gt;;. C:&lt;span class=&quot;hljs-command&quot;&gt;\Users&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\JEFFCH&lt;/span&gt;&lt;span class=&quot;hljs-special&quot;&gt;~&lt;/span&gt;1&lt;span class=&quot;hljs-command&quot;&gt;\AppData&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Local&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Temp&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ &lt;/span&gt;C:&lt;span class=&quot;hljs-command&quot;&gt;\develop&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\jdk&lt;/span&gt;1.8.0_121&lt;span class=&quot;hljs-command&quot;&gt;\jre&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt;;C:&lt;span class=&quot;hljs-command&quot;&gt;\Windows&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Sun&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\Java&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\lib&lt;/span&gt;&lt;span class=&quot;hljs-command&quot;&gt;\ext&lt;/span&gt; &lt;div&gt; 作者：redzealot2007 发表于2017/4/13 0:15:28 [原文链接](http://blog.csdn.net/redzealot2007/article/details/70149549) &lt;/div&gt; &lt;div&gt; 阅读：6 评论：0 [查看评论](http://blog.csdn.net/redzealot2007/article/details/70149549#comments) &lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[转]android:exported 属性详解]]></title>
      <url>%2F2017%2F04%2F11%2F%E8%BD%AC-android-exported-%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[[转载出处：http://blog.csdn.net/watermusicyes/article/details/46460347] 昨天在用360扫描应用漏洞时，扫描结果，出来一个Android:exported属性，其实之前根本不知道这个属性，更不知道这个属性用来干嘛的，详情见下图：&nbsp; &nbsp; 因此，查了官方API，学习了一下这个属性! android:exported 是Android中的四大组件 Activity，Service，Provider，Receiver 四大组件中都会有的一个属性。 总体来说它的主要作用是：是否支持其它应用调用当前组件。&nbsp; 默认&#20540;：如果包含有intent-filter 默认&#20540;为true; 没有intent-filter默认&#20540;为false。 下面来详细的了解一下四大组件中的这个属性： 1、先来看：Activity中的： `&lt;activity …… android:exported=[&quot;true&quot; | &quot;false&quot;] …… /&gt; ` * 1 * 2 * 3 * 4 * 5 * 6 * 1 * 2 * 3 * 4 * 5 * 6 意思如下： 在Activity中该属性用来标示：当前Activity是否可以被另一个Application的组件启动：true允许被启动；false不允许被启动。 如果被设置为了false，那么这个Activity将只会被当前Application或者拥有同样user ID的Application的组件调用。 exported 的默认&#20540;根据Activity中是否有intent filter 来定。没有任何的filter意味着这个Activity只有在详细的描述了他的class name后才能被唤醒 .这意味着这个Activity只能在应用内部使用，因为其它application并不知道这个class的存在。所以在这种情况下，它的默认&#20540;是false。从另一方面讲，如果Activity里面至少有一个filter的话，意味着这个Activity可以被其它应用从外部唤起，这个时候它的默认&#20540;是true。 其实，不只有这个属性可以指定Activity是否暴露给其它应用，也可以使用permission来限制外部实体唤醒当前Activity（详情见permission属性） 2、Service中的： `&lt;service android:enabled=[&quot;true&quot; | &quot;false&quot;] android:exported=[&quot;true&quot; | &quot;false&quot;] android:icon=&quot;drawable resource&quot; android:isolatedProcess=[&quot;true&quot; | &quot;false&quot;] android:label=&quot;string resource&quot; android:name=&quot;string&quot; android:permission=&quot;string&quot; android:process=&quot;string&quot; &gt; . . . &lt;/service&gt; ` * 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 意思如下：&nbsp; 该属性用来标示，其它应用的组件是否可以唤醒service或者和这个service进行交互：true可以，false不可以。如果为false，只有同一个应用的组件或者有着同样user ID的应用可以启动这个service或者绑定这个service。 默认&#20540;根据当前service是否有intent filter来定。如果没有任何filter意味着当前service只有在被详细的描述class name后才会被唤醒。这意味这当前service只能在应用内部使用（因为其它应用不知道这个class name）.所以在这种情况下它的默认&#20540;为 false.从另一方面讲，如果至少有一个filter的话那么就意味着这个service可以被外部应用使用，这种情况下默认&#20540;为true。 其实，不只有这个属性可以指定service是否暴露给其它应用。你也可以使用permission来限制外部实体唤醒当前service（详情见permission属性） 3、Provider中的： `&lt;provider android:authorities=&quot;list&quot; android:enabled=[&quot;true&quot; | &quot;false&quot;] android:exported=[&quot;true&quot; | &quot;false&quot;] android:grantUriPermissions=[&quot;true&quot; | &quot;false&quot;] android:icon=&quot;drawable resource&quot; android:initOrder=&quot;integer&quot; android:label=&quot;string resource&quot; android:multiprocess=[&quot;true&quot; | &quot;false&quot;] android:name=&quot;string&quot; android:permission=&quot;string&quot; android:writePermission=&quot;string&quot; &gt; . . . &lt;/provider&gt; ` * 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 意思如下：&nbsp; 当前内容提供者是否会被其它应用使用：&nbsp; true: 当前提供者可以被其它应用使用。任何应用可以使用Provider通过URI 来获得它，也可以通过相应的权限来使用Provider。 false:当前提供者不能被其它应用使用。设置Android：exported=“false”来限制其它应用获得你应用的Provider。只有拥有同样的user ID 的应用可以获得当前应用的Provider。 当Android sdk 的最小版本为16或者更低时他的默认&#20540;是true。如果是17和以上的版本默认&#20540;是false。 可以通过Android：exported=“fasle” 和 permission来限制当前应用Provider是否会被其它应用获取。 4、receiver中的： `&lt;receiver android:enabled=[&quot;true&quot; | &quot;false&quot;] android:exported=[&quot;true&quot; | &quot;false&quot;] android:icon=&quot;drawable resource&quot; android:label=&quot;string resource&quot; android:name=&quot;string&quot; android:permission=&quot;string&quot; android:process=&quot;string&quot; &gt; . . . &lt;/receiver&gt; ` * 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 意思如下：&nbsp; 当前broadcast Receiver 是否可以从当前应用外部获取Receiver message 。true，可以；false 不可以。如果为false ,当前broadcast Receiver 只能收到同一个应用或者拥有同一 user ID 应用发出广播。 默认&#20540;根据当前 broadcast Receiver 是否包含intent filter来定。如果没有任何的filter的话意味着只有在被详细的描述了class name的情况下才会被唤起。这意味着当前Receiver只能在应用内部被使用（因为其它应用不知道这个类的存在。）在这种情况下，默认&#20540;是false。如果至少包含一个filter意味着当前broadcast Receiver 将会收到来自系统或者其它应用的广播，所以这个时候默认&#20540;是true。 不只有这个属性可以指定broadcast Receiver 是否暴露给其它应用。你也可以使用permission来限制外部应用给他发送消息。 在上文中提到的两个概念：user ID 和 permission 在网上找见了两篇不错的文章：&nbsp; 1、Android中startActivity中的permission检测与UID机制&nbsp; 2、Android Permission 机制 &lt;div&gt; 作者：redzealot2007 发表于2017/4/11 11:27:11 [原文链接](http://blog.csdn.net/redzealot2007/article/details/70049535) &lt;/div&gt; &lt;div&gt; 阅读：23 评论：0 [查看评论](http://blog.csdn.net/redzealot2007/article/details/70049535#comments) &lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[转]Android中Preference的使用以及监听事件分析]]></title>
      <url>%2F2017%2F04%2F09%2F%E8%BD%AC-Android%E4%B8%ADPreference%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[[转载出处：http://blog.csdn.net/qinjuning/article/details/6710003/] 在Android系统源码中，绝大多数应用程序的UI布局采用了Preference的布局结构，而不是我们平时在模拟器中构建应用程序时使用的View布局结构，例如，Setting模块中布局。当然，凡事都有例外，FMRadio应用程序中则使用了View布局结构(可能是该应用程序是marvel公司提供的，如果由google公司做，那可说不准)。归根到底，Preference布局结构和View的布局结构本质上还是大同小异，Preference的优点在于布局界面的可控性和高效率以及可存储&#20540;的简洁性(每个PreferenPreferencece存储在相对应下的SharedPreference文件夹下)。 下面，我们对比Preference和View下得各个子控件，对他们的家庭元素在宏观上有个更好的把握性。 ##&nbsp;&nbsp;&nbsp;&nbsp; 单一控件： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Preference 控件家庭&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; View控件家庭&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 控件含义 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Preference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TextView&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 文本框 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CheckPreference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CheckBox&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 单选框 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EditTextPreference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EditText&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 输入文本框&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ListPreference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ListView&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 列表框 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RingtonePreference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 铃声 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其实在Android源码系统中还有很多的”未完工”的Preference, 没有为它们提供PI接口，例如SeekBarPreference， &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 有兴趣的同学可以参考源码，具体路径为：frameworks/base/core/Java/preference。 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 组合控件：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PreferenceCategory :类&#20284;于LinearLayou、RelativeLayout，用于组合一组Preference，使布局更具备层次感 。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PreferenceScreen&nbsp; : 所有Preference元素的根节点。 &nbsp;&nbsp; &nbsp;&nbsp; 显示Preference布局结构的方法为：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 使我们的Activity继承PreferenceActivity，然后在onCreate()方法中通过&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addPreferencesFromResource(R.xml.custom_preference) (我们自定义的Preference 布局)。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;怎么样，是不是&#20284;曾相识？稍后会用一个Demo来为您详述。 &nbsp;&nbsp; ##&nbsp;&nbsp;&nbsp;Preference元素的通用XML Attributes说明：&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:key&nbsp;：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 每个Preference控件独一无二的”ID”,唯一表示此Preference。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:defaultValue&nbsp;： 默认&#20540;。 例如，CheckPreference的默认&#20540;可为”true”，默认为选中状态； &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EditTextPreference的默认&#20540;可为”110” 。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:enabled&nbsp;：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 表示该Preference是否可用状态。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title&nbsp;：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 每个Preference在PreferenceScreen布局上显示的标题——大标题 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:summary&nbsp;：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 每个Preference在PreferenceScreen布局上显示的标题——小标题(可以没有) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:persistent：&nbsp;&nbsp;&nbsp; 表示Preference元素所对应的&#20540;是否写入sharedPreferen文件中，如果是true，则表示写 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 入；否则，则表示不写入该Preference元素的&#20540;。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:dependency：&nbsp;&nbsp;&nbsp; 表示一个Preference(用A表示)的可用状态依赖另外一个Preference(用B表示)。B可用， &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 则A可用；B不可用，则A不可用。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:disableDependentsState：&nbsp; 与android:dependency相反。B可用，则A不可用；B不可用，则A可用。 &nbsp;&nbsp; &nbsp; &nbsp;常用的方法则包括： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;getKey()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setKey() &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSummary()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setSummary() &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getText()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setText() &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getXXX()代表取得xxx属性的&#20540;。 &nbsp; 一个简易的效果图如下： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; ##&nbsp;Preference的跳转： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方法一：在配置每个Preference元素节点时，我们可以显示为点击它时所跳转的Intent。点击该Preference，跳转至目标Intent。除非在onPreferenceTreeClick()方法中进行抉择。在xml中配置如下： [java]&nbsp;view plain&nbsp;copy&nbsp;print? &lt;Preference&nbsp;android:key=&quot;wifi_setting&quot;&nbsp;android:title=&quot;Wi-Fi设置&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;android:summary=&quot;设置和管理无线接入点&quot;&nbsp;android:dependency=&quot;apply_wifi&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;!–&nbsp;点击时&nbsp;自定义一个默认跳转Intent&nbsp;&nbsp;action指定隐式Intent&nbsp;–&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;!–&nbsp;action指定隐式Intent&nbsp;;&nbsp;targetPackage和targetClass指定显示Intent–&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;intent&nbsp;android:action=&quot;com.feixun.action.seemAction&quot;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:targetPackage=&quot;com.feixun.qin&quot;&nbsp;android:targetClass=&quot;com.feixun.qin.MainActivity&quot;&nbsp;/&gt;&nbsp;&nbsp; &lt;/Preference&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 方法二：可以在onPreferenceTreeClick()创建新的intent显示的进行跳转。 &nbsp; &nbsp;&nbsp;接下来，对每个Preference的的独有XML Attributes和方法进行一下总结，使大家有更好的深入理解。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、EditPreference&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 方法： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getEditText()&nbsp; 返回的是我们在该控件中输入的文本框&#20540; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getText()&nbsp;&nbsp;&nbsp;&nbsp; 返回的是我们之前sharedPreferen文件保存的&#20540; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 效果图： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、ListPreference &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XML Attributes： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:dialogTitle：弹出控件对话框时显示的标题 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:entries：类型为array，控件欲显示的文本 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:entryValues：类型为array，与文本相对应的key-value键&#20540;对，value保存至sharedPreference文件 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 说明：entries和entryValue属性使用的数组为定义在资源文件arrays.xml的数组名： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 方法： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;CharSequence[]&nbsp;&nbsp;&nbsp;&nbsp;getEntries)()： 返回的是控件显示文本的一个”key”数组，对应于属性android:entries &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CharSequence[]&nbsp;&nbsp;&nbsp;&nbsp;getEntryValues)()：返回的一个”value”数组，对应于属性android: entryValues &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CharSequence&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getEntry)(): 返回当前选择文本 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getValue() :返回当前选中文本选中的value 。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 与之对应的还有它们所对应的setXXX()方法，可以参考SDK进行分析。效果图： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;采用的数组为：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [java]&nbsp;view plain&nbsp;copy&nbsp;print? &lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;utf-8&quot;?&gt;&nbsp;&nbsp; &lt;resources&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;string-array&nbsp;name=&quot;department&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;item&gt;IT&lt;/item&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;item&gt;Commerce&lt;/item&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;item&gt;HR&lt;/item&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/string-array&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;string-array&nbsp;name=&quot;department_value&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;item&gt;001&lt;/item&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;item&gt;002&lt;/item&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;item&gt;003&lt;/item&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/string-array&gt;&nbsp;&nbsp; &lt;/resources&gt;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、RingtonePreference &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XML Attributes： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:ringtoneType：响铃的铃声类型，主要有：ringtone(音乐)、notification(通知)、alarm(闹铃) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 、all(所有可用声 音类型)。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:showDefault&nbsp;：默认铃声，可以使用系统(布尔&#20540;—true,false)的或者自定义的铃声 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:showSilent&nbsp; ：指定铃声是否为静音。指定铃声包括系统默认铃声或者自定义的铃声 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;效果图： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;重点：分析Preference事件 &nbsp; &nbsp;&nbsp; ★在PreferenceActivity方法中，一个比较重要的监听点击事件方法为： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public booleanonPreferenceTreeClick (PreferenceScreen preferenceScreen, Preference preference) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;说 明 ：&nbsp;当Preference控件被点击时，触发该方法。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 参数说明： preference&nbsp;&nbsp; 点击的对象。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 返回&#20540;：&nbsp;&nbsp; true&nbsp; 代表点击事件已成功捕捉，无须执行默认动作或者返回上层调用链。 例如，不跳转至默认Intent。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;false 代表执行默认动作并且返回上层调用链。例如，跳转至默认Intent。 &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;在我们继承PreferenceActivity的Activity可以重写该方法，来完成我们对Preference事件的捕捉。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 相信通过前面的介绍，你一定知道了如何使用了Preference家族并且对其触发方法。下面我们抛出另外两枚炸弹—— Preference相关的两个重要监听接口。 &nbsp; &nbsp;&nbsp; ★&nbsp;&nbsp;Preference.OnPreferenceChangeListener&nbsp;&nbsp;&nbsp;&nbsp; 该监听器的一个重要方法如下： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean onPreferenceChange(Preference&nbsp;preference,Object&nbsp;objValue) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 说明：&nbsp; 当Preference的元素&#20540;发送改变时，触发该事件。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 返回&#20540;：true&nbsp; 代表将新&#20540;写入sharedPreference文件中。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; false 则不将新&#20540;写入sharedPreference文件 &nbsp; &nbsp;&nbsp;★&nbsp;&nbsp;&nbsp;Preference.OnPreferenceClickListener&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该监听器的一个重要方法如下： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public booleanonPreferenceClick(Preference preference) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 说明：当点击控件时触发发生，可以做相应操作。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 那么当一个Preference控件实现这两个接口时，当被点击或者&#20540;发生改变时，触发方法是如何执行的呢?事实上， &nbsp;它的触发规则如下： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;先调用onPreferenceClick()方法，如果该方法返回true，则不再调用onPreferenceTreeClick方法 ； &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果onPreferenceClick方法返回false，则继续调用onPreferenceTreeClick方法。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;onPreferenceChange的方法独立与其他两种方法的运行。也就是说，它总是会运行。 ** ** &nbsp; &nbsp; &nbsp;&nbsp;补充：点击某个Preference控件后，会先回调onPreferenceChange()方法，即是否保存&#20540;，然后再回&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;调onPreferenceClick以及onPreferenceTreeClick()方法，因此在onPreferenceClick/onPreferenceTreeClick &nbsp;方法中我们得到的控件&#20540;就是最新的Preference控件&#20540;。 &nbsp; &nbsp; 那么，开始我们的实战之旅吧！ 下面给您最火热的战场。 &nbsp;&nbsp;&nbsp; 1，新建我们的preference.xml文件。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;① 在res文件夹下，新建xml文件夹。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;② 在新建的xml文件夹下，新建Android XML File。命名为mypeference.xml 。类型选择为Preference。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;③&nbsp;打开我们的mypeference.xml，视图选择Structure。可以手动配置我们的布局文件。可选的Preference空间如下： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Demo中mypeference.xml的布局文件如下：&nbsp; &nbsp; [java]&nbsp;view plain&nbsp;copy&nbsp;print? &lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;utf-8&quot;?&gt;&nbsp;&nbsp; &lt;PreferenceScreen&nbsp;xmlns:android=&quot;http://schemas.android.com/apk/res/android&amp;quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;PreferenceCategory&nbsp;android:title=&quot;我的位置&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:key=&quot;set_local&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;CheckBoxPreference&nbsp;android:key=&quot;apply_wireless&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title=&quot;使用无线网络&quot;&nbsp;android:summary=&quot;使用无线网络在应用程序（例如Google地图）中查看位置&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:defaultValue=&quot;true&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/CheckBoxPreference&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;CheckBoxPreference&nbsp;android:key=&quot;apply_gps&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title=&quot;使用GPS&quot;&nbsp;android:summary=&quot;定位到街道级别（需要消耗更多的电量以及天气允许）&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/CheckBoxPreference&gt;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;PreferenceCategory&nbsp;android:title=&quot;无线和网络设置&quot;&gt;&lt;/PreferenceCategory&gt;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;CheckBoxPreference&nbsp;android:key=&quot;apply_fly&quot;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title=&quot;飞行模式&quot;&nbsp;android:summary=&quot;禁用所有无线连接&quot;&nbsp;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/CheckBoxPreference&gt;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;CheckBoxPreference&nbsp;android:key=&quot;apply_internet&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title=&quot;Internet共享&quot;&nbsp;android:summary=&quot;禁用通过USB共享Internet连接&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/CheckBoxPreference&gt;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;CheckBoxPreference&nbsp;android:key=&quot;apply_wifi&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title=&quot;Wi-Fi&quot;&nbsp;android:summary=&quot;打开Wi-Fi&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/CheckBoxPreference&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;Preference&nbsp;android:key=&quot;wifi_setting&quot;&nbsp;android:title=&quot;Wi-Fi设置&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:summary=&quot;设置和管理无线接入点&quot;&nbsp;android:dependency=&quot;apply_wifi&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!–&nbsp;点击时&nbsp;自定义一个默认跳转Intent&nbsp;&nbsp;action指定隐式Intent&nbsp;–&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!–&nbsp;action指定隐式Intent&nbsp;;&nbsp;targetPackage和targetClass指定显示Intent–&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;intent&nbsp;android:action=&quot;com.feixun.action.seemAction&quot;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:targetPackage=&quot;com.feixun.qin&quot;&nbsp;android:targetClass=&quot;com.feixun.qin.MainActivity&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/Preference&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;CheckBoxPreference&nbsp;android:key=&quot;apply_bluetooth&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title=&quot;蓝牙&quot;&nbsp;android:summary=&quot;启用蓝牙&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/CheckBoxPreference&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;Preference&nbsp;android:key=&quot;bluetooth_setting&quot;&nbsp;android:title=&quot;蓝牙设置&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:summary=&quot;管理连接、设备设备名称和可检测性&quot;&nbsp;android:dependency=&quot;apply_bluetooth&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/Preference&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;EditTextPreference&nbsp;android:key=&quot;number_edit&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title=&quot;输入电话号码&quot;&nbsp;android:defaultValue=&quot;123&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/EditTextPreference&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;ListPreference&nbsp;android:key=&quot;depart_value&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title=&quot;部门设置&quot;&nbsp;android:dialogTitle=&quot;选择部门&quot;&nbsp;android:entries=&quot;@array/department&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:entryValues=&quot;@array/department_value&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/ListPreference&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;RingtonePreference&nbsp;android:key=&quot;ring_key&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:title=&quot;铃声&quot;&nbsp;android:ringtoneType=&quot;all&quot;&nbsp;android:showDefault=&quot;true&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:showSilent=&quot;true&quot;&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/RingtonePreference&gt;&nbsp;&nbsp; &lt;/PreferenceScreen&gt;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 2，新建一个HelloActivity继承PreferenceActivity，代码如下：&nbsp;&nbsp;&nbsp; [java]&nbsp;view plain&nbsp;copy&nbsp;print? package&nbsp;com.feixun.qin;&nbsp;&nbsp; &nbsp;&nbsp; import&nbsp;android.content.Intent;&nbsp;&nbsp; import&nbsp;android.content.SharedPreferences;&nbsp;&nbsp; import&nbsp;android.os.Bundle;&nbsp;&nbsp; import&nbsp;android.preference.CheckBoxPreference;&nbsp;&nbsp; import&nbsp;android.preference.EditTextPreference;&nbsp;&nbsp; import&nbsp;android.preference.ListPreference;&nbsp;&nbsp; import&nbsp;android.preference.Preference;&nbsp;&nbsp; import&nbsp;android.preference.PreferenceActivity;&nbsp;&nbsp; import&nbsp;android.preference.PreferenceManager;&nbsp;&nbsp; import&nbsp;android.preference.PreferenceScreen;&nbsp;&nbsp; import&nbsp;android.preference.Preference.OnPreferenceClickListener;&nbsp;&nbsp; import&nbsp;android.util.Log;&nbsp;&nbsp; &nbsp;&nbsp; public&nbsp;class&nbsp;HelloPreference&nbsp;extends&nbsp;PreferenceActivity&nbsp;implements&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preference.OnPreferenceClickListener,&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preference.OnPreferenceChangeListener&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;String&nbsp;TAG&nbsp;=&nbsp;&quot;HelloPreference&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;CheckBoxPreference&nbsp;mapply_wifiPreference;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//打开wifi&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;CheckBoxPreference&nbsp;mapply_internetPreference;&nbsp;&nbsp;&nbsp;//Internet共享&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;ListPreference&nbsp;depart_valuePreference;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//部门设置&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;EditTextPreference&nbsp;number_editPreference;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//输入电话号码&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Preference&nbsp;mwifi_settingPreference;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//wifi设置&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;oldDeptId;&nbsp;//&nbsp;旧部门的名称&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;onCreate(Bundle&nbsp;savedInstanceState)&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onCreate(savedInstanceState);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addPreferencesFromResource(R.xml.mypreference);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//根据key&#20540;找到控件&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapply_wifiPreference&nbsp;=&nbsp;(CheckBoxPreference)&nbsp;findPreference(&quot;apply_wifi&quot;);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapply_internetPreference&nbsp;=&nbsp;(CheckBoxPreference)&nbsp;findPreference(&quot;apply_internet&quot;);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depart_valuePreference&nbsp;=&nbsp;(ListPreference)&nbsp;findPreference(&quot;depart_value&quot;);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_editPreference&nbsp;=&nbsp;(EditTextPreference)&nbsp;findPreference(&quot;number_edit&quot;);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mwifi_settingPreference&nbsp;=&nbsp;(Preference)&nbsp;findPreference(&quot;wifi_setting&quot;);&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置监听器&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapply_internetPreference.setOnPreferenceClickListener(this);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapply_internetPreference.setOnPreferenceChangeListener(this);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depart_valuePreference.setOnPreferenceClickListener(this);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depart_valuePreference.setOnPreferenceChangeListener(this);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_editPreference.setOnPreferenceClickListener(this);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number_editPreference.setOnPreferenceChangeListener(this);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mwifi_settingPreference.setOnPreferenceClickListener(this);&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;得到我们的存储Preferences&#20540;的对象，然后对其进行相应操作&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SharedPreferences&nbsp;shp&nbsp;=&nbsp;PreferenceManager.getDefaultSharedPreferences(this);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;apply_wifiChecked&nbsp;=&nbsp;shp.getBoolean(&quot;apply_wifi&quot;,&nbsp;false);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;对控件进行的一些操作&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;void&nbsp;operatePreference(Preference&nbsp;preference)&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(preference&nbsp;==&nbsp;mapply_wifiPreference){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//点击了&nbsp;&nbsp;&nbsp;&nbsp;&quot;打开wifi&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;&nbsp;Wifi&nbsp;CB,&nbsp;and&nbsp;isCheckd&nbsp;=&quot;&#43;&nbsp;mapply_wifiPreference.isChecked());&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if&nbsp;(preference.getKey().equals(&quot;apply_internet&quot;)){&nbsp;&nbsp;&nbsp;//点击了&quot;Internet共享&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;&nbsp;internet&nbsp;CB,&nbsp;and&nbsp;isCheckd&nbsp;=&nbsp;&quot;&#43;mapply_internetPreference.isChecked());&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if&nbsp;(preference&nbsp;==&nbsp;depart_valuePreference){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//点击了&nbsp;&quot;部门设置&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;&nbsp;department&nbsp;CB,and&nbsp;selectValue&nbsp;=&nbsp;&quot;&#43;&nbsp;depart_valuePreference.getValue()&nbsp;&#43;&nbsp;&quot;,&nbsp;Text=&quot;&#43;&nbsp;depart_valuePreference.getEntry());&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if&nbsp;(preference.getKey().equals(&quot;wifi_setting&quot;))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//点击了&quot;wifi设置&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mwifi_settingPreference.setTitle(&quot;its&nbsp;turn&nbsp;me.&quot;);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if&nbsp;(preference&nbsp;==&nbsp;number_editPreference)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//点击了&quot;输入电话号码&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;Old&nbsp;Value=&quot;&#43;&nbsp;number_editPreference.getText()&nbsp;&#43;&nbsp;&quot;,&nbsp;New&nbsp;Value=&quot;&#43;&nbsp;number_editPreference.getEditText().toString());&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;点击事件触发&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;onPreferenceClick(Preference&nbsp;preference)&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;method&nbsp;stub&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;onPreferenceClick—–&gt;&quot;&#43;String.valueOf(preference.getKey()));&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;对控件进行操作&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;operatePreference(preference);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//点击事件触发&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;onPreferenceTreeClick(PreferenceScreen&nbsp;preferenceScreen,&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preference&nbsp;preference)&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;onPreferenceTreeClick—–&gt;&quot;&#43;preference.getKey());&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;对控件进行操作&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;operatePreference(preference);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(preference.getKey().equals(&quot;wifi_setting&quot;))&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建一个新的Intent，&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;函数如果返回true，&nbsp;则跳转至该自定义的新的Intent&nbsp;;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;函数如果返回false，则跳转至xml文件中配置的Intent&nbsp;;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Intent&nbsp;i&nbsp;=&nbsp;new&nbsp;Intent(HelloPreference.this,&nbsp;OtherActivity.class);&nbsp;&nbsp;//OtherActivity只是一个简单的Activity&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.putExtra(&quot;type&quot;,&nbsp;&quot;wifi&quot;);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startActivity(i);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;当Preference的&#20540;发生改变时触发该事件，true则以新&#20540;更新控件的状态，false则do&nbsp;noting&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;onPreferenceChange(Preference&nbsp;preference,&nbsp;Object&nbsp;objValue)&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;onPreferenceChange—–&gt;&quot;&#43;String.valueOf(preference.getKey()));&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(preference&nbsp;==&nbsp;mapply_wifiPreference){&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;Wifi&nbsp;CB,&nbsp;and&nbsp;isCheckd&nbsp;=&nbsp;&quot;&nbsp;&#43;&nbsp;String.valueOf(objValue));&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if&nbsp;(preference.getKey().equals(&quot;apply_internet&quot;))&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;internet&nbsp;CB,&nbsp;and&nbsp;isCheckd&nbsp;=&nbsp;&quot;&#43;&nbsp;String.valueOf(objValue));&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp;//不保存该新&#20540;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if&nbsp;(preference&nbsp;==&nbsp;depart_valuePreference){&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;&nbsp;&nbsp;Old&nbsp;Value&quot;&#43;&nbsp;depart_valuePreference.getValue()&#43;&quot;&nbsp;NewDeptName&quot;&#43;objValue);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if&nbsp;(preference.getKey().equals(&quot;wifi_setting&quot;))&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;change&quot;&nbsp;&#43;&nbsp;String.valueOf(objValue));&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mwifi_settingPreference.setTitle(&quot;its&nbsp;turn&nbsp;me.&quot;);&nbsp;&nbsp;//重新设置title&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(preference&nbsp;==&nbsp;number_editPreference)&nbsp;{&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(TAG,&nbsp;&quot;Old&nbsp;Value&nbsp;=&nbsp;&quot;&nbsp;&#43;&nbsp;String.valueOf(objValue));&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;//&nbsp;不保存更新&#20540;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;&nbsp;&nbsp;//保存更新后的&#20540;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp; }&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3，AndroidManifest 文件如下： [java]&nbsp;view plain&nbsp;copy&nbsp;print? &lt;?xml&nbsp;version=‘1.0’&nbsp;encoding=‘utf-8’&nbsp;standalone=‘yes’&nbsp;?&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;map&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_wifi&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_internet&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;string&nbsp;name=&quot;number_edit&quot;&gt;45677&lt;/string&gt;&nbsp;&nbsp; &lt;string&nbsp;name=&quot;ring_key&quot;&gt;content://settings/system/ringtone&lt;/string&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_bluetooth&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_fly&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;string&nbsp;name=&quot;depart_value&quot;&gt;001&lt;/string&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_gps&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_wireless&quot;&nbsp;value=&quot;false&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/map&gt;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 程序运行后，效果如上所示，是不是很给力呀！&nbsp; ##sharedPreference文件 &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;前面我们说过，Android系统会将Preference元素的&#20540;存储在sharedPreference文件中。该文件存放路径位于 DDMS视图下的data/data/[packgename]/shared_prefs/文件下，命名约定为：packagename_preferencse.xml。 &nbsp;我们的com.feixun.qin_preferences.xm保存的&#20540;为： [java]&nbsp;view plain&nbsp;copy&nbsp;print? &lt;?xml&nbsp;version=‘1.0’&nbsp;encoding=‘utf-8’&nbsp;standalone=‘yes’&nbsp;?&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;map&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_wifi&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_internet&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;string&nbsp;name=&quot;number_edit&quot;&gt;45677&lt;/string&gt;&nbsp;&nbsp; &lt;string&nbsp;name=&quot;ring_key&quot;&gt;content://settings/system/ringtone&lt;/string&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_bluetooth&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_fly&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;string&nbsp;name=&quot;depart_value&quot;&gt;001&lt;/string&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_gps&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;boolean&nbsp;name=&quot;apply_wireless&quot;&nbsp;value=&quot;false&quot;&nbsp;/&gt;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/map&gt;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;已一个键&#20540;对的形式保存，name为Preference的key&#20540;，value为Preference的value&#20540;。 &nbsp;&nbsp; &nbsp;在应用程序中，我们可以通过代码的方式来访问该sharedPreference文件，继而可以对其进行读取甚至任何操作。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 代码如下：&nbsp; [java]&nbsp;view plain&nbsp;copy&nbsp;print? //&nbsp;得到我们的存储Preferences&#20540;的对象，然后对其进行相应操作&nbsp;&nbsp; SharedPreferences&nbsp;shp&nbsp;=&nbsp;PreferenceManager.getDefaultSharedPreferences(this);&nbsp;&nbsp; boolean&nbsp;apply_wifiChecked&nbsp;=&nbsp;shp.getBoolean(&quot;apply_wifi&quot;,&nbsp;false);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;就介绍到这儿了 。 &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 代码下载地址：http://download.csdn.net/detail/qinjuning/3807077 &lt;div&gt; 作者：redzealot2007 发表于2017/4/9 14:49:47 [原文链接](http://blog.csdn.net/redzealot2007/article/details/69815648) &lt;/div&gt; &lt;div&gt; 阅读：25 评论：0 [查看评论](http://blog.csdn.net/redzealot2007/article/details/69815648#comments) &lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[原]阿里巴巴Weex对移动应用的理解]]></title>
      <url>%2F2017%2F04%2F06%2F%E5%8E%9F-%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Weex%E5%AF%B9%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[移动应用需要支撑并行研发如今移动应用的开发需要并行研发的能力，当一个移动应用发展到一定规模的时候，能否支撑大规模的并行研发就成为了一件非常关键而又重要的事情。否则很容易变成工程瓶颈。 移动应用需要动态性如今移动应用不论从研发节奏、部署的灵活性和时效性、包大小、还是从研发到发布再到反馈的迭代周期上，都和移动互联网的发展速度极不相符。移动应用需要更简单轻量的研发模型，需要摆脱版本部署和分发的笨重过程。 移动应用需要开放互联如今移动应用的内容和信息都是相互孤立的，应用之间的交流变得非常复杂和困难，也缺乏一定的标准和规范化的容器来承载。 整体结构设计我们认为一个具有高并行研发能力、动态化和标准化规范化的移动应用应该由以下几个方面构成：页面：首先移动应用应该可以被拆解成若干个页面，每个页面相对解耦独立，同时每个页面都有一个 URL 进行唯一标识。路由：这些页面将会通过路由机制有机的串联起来，页面之间的关系是通过路由来进行调度的。常见的移动应用路由包括导航栏、tab 切换等。设备能力：以各种 API 或服务的方式提供出来，供页面自由使用。这样的话，在构建一个完整的移动应用之前，先确定你的应用有多少页面，每个页面分别是什么 URL，页面之间的关联和跳转逻辑是怎样的，然后梳理整个移动应用需要的所有 API 和服务。 鸣谢 Weex&lt;div&gt; 作者：redzealot2007 发表于2017/4/6 16:29:08 [原文链接](http://blog.csdn.net/redzealot2007/article/details/69396380) &lt;/div&gt; &lt;div&gt; 阅读：30 评论：0 [查看评论](http://blog.csdn.net/redzealot2007/article/details/69396380#comments) &lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[原]JVM垃圾收集器]]></title>
      <url>%2F2017%2F04%2F02%2F%E5%8E%9F-JVM%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%2F</url>
      <content type="text"><![CDATA[[牛客网]下列哪项不属于jdk1.6垃圾收集器？ A.Serail收集器 B.parNew收集器 C.CMS收集器 D.G1收集器 在牛客网刷题，碰到这么一个问题，只知道JVM有垃圾收集器，却从来没具体了解过，真是越学越发现自己的无知，不懂就学。 概述垃圾收集 Garbage Collection 通常被称为“GC”，它诞生于1960年 MIT 的 Lisp 语言。如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。 垃圾收集器需要完成的三件事： 1）哪些内存需要回收？ 2）什么时候回收？ 3）如何回收？ Jvm运行时数据区域Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，已经创建和销毁时间，有的区域随着虚拟机进程的启动而创建，有些区域则依赖用户线程的启动和结束而创建和销毁。根据《Java虚拟机规范（Java SE 7）》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示： `&lt;/pre&gt; ![](http://ontjktddg.bkt.clouddn.com/image/20160430235004007.jpg?imageView2/0/format/webp/interlace/1/q/75|imageslim) ### 线程隔离（私有）的数据区 程序计数器 程序计数器（Program Counter Register）是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令、分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。 由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的。在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各个线程之间计数器互不影响，独立存储。 如果线程正在执行的是一个Java方法，那这个计数器记录的是正在执行的字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（undefined）。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。 Java虚拟机栈 虚拟机栈（Java Virtual Machine Stack）描述的是Java方法执行的内存模型：每个方法被执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。 在Java虚拟机规范中，对这个区域规定了两种异常情况：1. 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；2. 如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可以扩展），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。 本地方法栈 本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常类似，它们之间的区别在于虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则是为虚拟机使用到的Native方法服务。在虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由的实现它。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。 所有线程共享的数据区 Java堆 对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都要在这里分配内存。 Java堆是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”（Garbage Collected Heap）。从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以Java堆还可以细分为：新生代和老年代；再细致一点的有：Eden空间、From Survivor空间、To Survivor空间等。 根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。如果在堆中没有内存完成实例的分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。 方法区 方法区（Method Area）用于存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。 Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存空间和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。 根据Java虚拟机规范的规定，当方法区无法满足内存分配需要时，将抛出OutOfMemoryError异常。 直接内存`直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁使用，而且也可能导致OutOfMemoryError异常出现。 在JDK 1.4 中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方法，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。 显然，本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，肯定还是会受到本机总内存（包括RAM以及SWAP区或者分页文件）大小以及处理器寻址空间的限制。服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。 ` JVM 中，程序计数器、虚拟机栈、本地方法栈都是随线程而生随线程而灭，栈帧随着方法的进入和退出做入栈和出栈操作，实现了自动的内存清理，因此，我们的内存垃圾回收主要集中于 Java 堆和方法区中，在程序运行期间，这部分内存的分配和使用都是动态的。 垃圾收集器`现在商用的JVM中的垃圾收集采用的是分代收集算法，即针对不同年代采用不同的收集算法。在JVM中，GC主要作用于堆内存中，堆内存又被划分为新生代和老年代，由于新生代对象绝大多数是朝生夕死，而老年代相对存活时间就很长，故而需要使用不同的垃圾收集机制，所以垃圾收集器也就分为新生代收集器和老年代收集器，两者相互组合进行JVM堆内存的空间回收（下图中相连的垃圾收集器表示可以相互组合，注意Serial Old和CMS也可以联合进行老年代的垃圾收集）。JDK6u14中开始测试的G1垃圾收集器，正式发布于JDK7u4中，是目前唯一不需要依赖其他垃圾收集器即可完成新生代和老年代内存收集。GC的两个指标：暂停时间-应对与存在大量用户交互的场景；吞吐量-应对后台计算任务。 新生代的垃圾收集器有：Serial收集器、ParNew收集器、Parallel Scavenge收集器 老年代的垃圾收集器有：Serial Old收集器、Parallel Old收集器、CMS收集器 G1收集器：http://f.dataguru.cn/thread-514678-1-1.html ` 概念理解 并发和并行 * 并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。 并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。 Minor GC 和 Full GC* 新生代GC（Minor GC）：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。 老年代GC（Major GC / Full GC）：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。 吞吐量 吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。 虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。 一、Serial收集器`Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。 特性： 这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。Stop The World 应用场景： Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。 优势： 简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。 ` 二、ParNew收集器`特性： ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。 应用场景： ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。 很重要的原因是：除了Serial收集器外，目前只有它能与CMS收集器配合工作。 在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。 不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。 Serial收集器 VS ParNew收集器： ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。 然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。 ` 三、Parallel Scavenge收集器`特性： Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器。 应用场景： 停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。 对比分析： Parallel Scavenge收集器 VS CMS等收集器： Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput）。 由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。 Parallel Scavenge收集器 VS ParNew收集器： Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。 GC自适应的调节策略： Parallel Scavenge收集器有一个参数-XX:+UseAdaptiveSizePolicy。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。 ` 四、Serial Old收集器`特性： Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记－整理算法。 应用场景： Client模式 Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。 Server模式 如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。 ` 五、Parallel Old收集器`特性： Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。 应用场景： 在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。 这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。 ` 六、CMS收集器`特性： CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。 CMS收集器是基于“标记—清除”算法实现的，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤： 初始标记（CMS initial mark） 初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。 并发标记（CMS concurrent mark） 并发标记阶段就是进行GC Roots Tracing的过程。 重新标记（CMS remark） 重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。 并发清除（CMS concurrent sweep） 并发清除阶段会清除对象。 由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。 优点： CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：并发收集、低停顿。 缺点： CMS收集器对CPU资源非常敏感 其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。 CMS默认启动的回收线程数是（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得很大。 CMS收集器无法处理浮动垃圾 CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。 由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。 也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。 CMS收集器会产生大量空间碎片 CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。 空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。 ` 七、G1收集器`特性：G1（Garbage-First）是一款面向服务端应用的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。 并行与并发G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。 分代收集与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。 空间整合与CMS的“标记—清理”算法不同，G1从整体来看是基于“标记—整理”算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。 可预测的停顿这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。 在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。 G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。 执行过程：G1收集器的运作大致可划分为以下几个步骤： 初始标记（Initial Marking）初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。 并发标记（Concurrent Marking）并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。 最终标记（Final Marking）最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要停顿线程，但是可并行执行。 筛选回收（Live Data Counting and Evacuation）筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。 附录 垃圾收集器常用参数 鸣谢深入理解Java虚拟机：JVM高级特性与最佳实践 第2版 深入理解Java虚拟机（一）-jvm运行时数据区 JVM-垃圾收集器 深入理解JVM（5） : Java垃圾收集器 深入理解JVM之四：详解垃圾收集器 &lt;div&gt; 作者：redzealot2007 发表于2017/4/2 15:26:54 [原文链接](http://blog.csdn.net/redzealot2007/article/details/68952318) &lt;/div&gt; &lt;div&gt; 阅读：16 评论：0 [查看评论](http://blog.csdn.net/redzealot2007/article/details/68952318#comments) &lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[原]一脸懵逼也能使用hexo搭建github博客]]></title>
      <url>%2F2017%2F03%2F29%2F%E5%8E%9F-%E4%B8%80%E8%84%B8%E6%87%B5%E9%80%BC%E4%B9%9F%E8%83%BD%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[这两天在网上浏览程序猿技术相关的资讯以及一些大神的技术博客文章，hexo这个词数次进入我的视线，于是我到网上查找了hexo相关的信息。 hexo是什么？ Hexo 是一个简单的、轻量的、基于Node的一个静态博客框架，可以方便的生成静态网页托管在Github和Heroku上，引用Hexo作者 @tommy351 的话：快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js。 正好我之前也经常上Github去学习一些开源项目，于是我也想尝试用hexo在Github上搭建一个自己的个人技术博客。但以前没弄过，一脸懵逼怎么办，首先上hexo官方网站看使用文档（hexo官方网站默认进去是英文，可以在页面右上方 选择中文），然后还参考了一些已经成功搭建好hexo博客的大神们的文章。以下就是详细步骤以及图示： 安装环境 安装Git下载并安装 Git。 安装Node.js下载并安装 Node.js。 创建Github仓库 登录Github，没有Github账号先注册。 点击页面右上方 选择New repository，填好仓库名称，格式是github用户名.github.io，然后点击Create repository。 生成SSH密钥 在任意文件目录单击鼠标右键，选择Git Bash，使用ssh命令生成密钥。 ssh-keygen -t rsa -C "Github的注册邮箱地址" 按三次回车等密钥生成完毕，会在C:\Users\计算机用户名.ssh目录下生成id_rsa和id_rsa.pub两个文件。 Github配置SSH密钥 打开id_rsa.pub，复制里面的内容，进入https://github.com/settings/ssh，New SSH Key，把内容粘贴到Key文本框里，然后点击Add SSH Key。 验证SSH Key： $ ssh -T git@github.com 返回以下语句说明SSH Key配置好了。 The authenticity of host 'github.com (192.30.253.112)' can't be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of known hosts. Hi redzealot2008! You've successfully authenticated, but GitHub does not provide shell access. 初始化本地git仓库 //设置Git的user name和email $ git config --global user.name "redzealot2008" $ git config --global user.email "Github的注册邮箱地址" //在本地的hexo init生成的文件夹中初始化git仓库 $ git init //将本地仓库和远程仓库连接（这一步骤可以不做） $ git remote add origin git@github.com:redzealot2008/redzealot2008.github.io.git 做完以上这些步骤，说明你的仓库可以使用ssh方式来上传下载代码，而不需要输入用户名和密码了 安装Hexo 在任意文件目录单击鼠标右键，选择Git Bash，使用npm命令即可下载安装Hexo。 //全局安装hexo $ npm install -g hexo-cli 安装过程需要一点时间，可使用hexo命令确认是否安装成功。 创建Hexo博客文件夹 在你喜欢的目录下创建Hexo博客文件夹（如：E:\hexo-github）。 初始化Hexo博客 在Git Bash里使用以下命令： //进入Hexo博客文件夹 $ cd e:\hexo-github /初始化Hexo博客 $ hexo init //安装依赖包 $ npm install 初始化完成后Hexo博客文件夹里的文件如下： . ├── _config.yml #全局配置文件 ├── package.json #应用程序的信息 ├── scaffolds #模板 ├── source #博客正文和其他源文件，404、favicon、CNAME | ├── _drafts #草稿 | └── _posts #文章 └── themes #主题`&lt;/pre&gt; hexo常用命令： `hexo help #查看帮助 hexo init #初始化一个目录 hexo new "postName" #新建文章 hexo new page "pageName" #新建页面 hexo generate #生成网页，可以在 public 目录查看整个网站的文件 hexo server #本地预览，'Ctrl+C'关闭 hexo deploy #部署.deploy目录 hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹** 简写： hexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy` 配置Hexo博客 打开Hexo博客文件夹里的_config.yml全局配置文件，主要修改以下参数： `# Site title: 剑若成风的成长日志 subtitle: 新的开始，回归自我 description: 剑若成风的个人技术博客 author: redzealot2008 language: zh-CN timezone: Asia/Shanghai # URL url: http://redzealot2008.com # Deployment deploy: type: git # 之前在Github上创建的仓库地址 repo: https://github.com/redzealot2008/redzealot2008.github.io.git branch: master` 注意：每个参数冒号后面要有一个空格。 新建文章 hexo new “标题” 在 _posts 目录下会生成文件标题.md `title: Hello Worlddate: 2015-07-30 07:56:29 #发表日期，一般不改动categories: hexo #文章文类 tags: [hexo,github] #文章标签，多于一项时用这种格式正文，使用Markdown语法书写 编辑完后保存，hexo server 预览。 hexo部署 在Git Bash使用以下命令即可完成部署。 //生成静态文件 hexo generate //安装 hexo-deployer-git $ npm install hexo-deployer-git --save //部署到Github hexo deploy 以下提示说明部署成功 [info] Deploy done: git hexo deploy报错could not read Username for ‘https://github.com‘，打开_config.yml修改repo地址： //方案1.在github.com前面添加Github注册的用户名 https://redzealot2008@github.com/redzealot2008/redzealot2008.github.io.git //方案2.使用SSH地址 git@github.com:redzealot2008/redzealot2008.github.io.git 鸣谢 手把手教你建github技术博客 20分钟教你使用hexo搭建github博客 解决用Hexo和GitHub搭建博客时hexo d命令报错问题&lt;div&gt; 作者：redzealot2007 发表于2017/3/29 14:10:26 [原文链接](http://blog.csdn.net/redzealot2007/article/details/68064298) &lt;/div&gt; &lt;div&gt; 阅读：15 评论：0 [查看评论](http://blog.csdn.net/redzealot2007/article/details/68064298#comments) &lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[原]新的开始，回归自我]]></title>
      <url>%2F2017%2F03%2F29%2F%E5%8E%9F-%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%8C%E5%9B%9E%E5%BD%92%E8%87%AA%E6%88%91%2F</url>
      <content type="text"><![CDATA[因为某些原因，荒废了两年半的时间，没有接触程序猿方面的东西，这两天才重新捡起来，在网上看了很多软件开发类的资讯，发现两年半的时间真的让自己都要不认识这个行业了，当年流行的技术现如今不再流行，新的更实用的技术层出不穷，感觉自己已经奥特了，重新回归觉得真的是个不小的挑战。 &lt;div&gt; 作者：redzealot2007 发表于2017/3/29 13:36:26 [原文链接](http://blog.csdn.net/redzealot2007/article/details/68063838) &lt;/div&gt; &lt;div&gt; 阅读：8 评论：0 [查看评论](http://blog.csdn.net/redzealot2007/article/details/68063838#comments) &lt;/div&gt;]]></content>
    </entry>

    
  
  
</search>
